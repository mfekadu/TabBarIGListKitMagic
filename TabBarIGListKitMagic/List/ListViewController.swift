//
//  ListViewController.swift
//  TabBarIGListKitMagic
//
//  Created by Michael Fekadu on 6/21/17.
//  Copyright (c) 2017 mikes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import IGListKit

protocol OutputToListCellSectionController {
  func doSomeViewUpdate(viewModel: List.Something.ViewModel)
}

protocol ListViewControllerInput
{
  func displaySomething(viewModel: List.Something.ViewModel)
  // from --ListView--- ListCellSC
  func buttonPressed()
}

protocol ListViewControllerOutput
{
  func doSomething(request: List.Something.Request)
}



extension ListViewController: ListViewControllerInput
{
  // MARK: - Event handling

  func buttonPressed() {
    // do stuff
  }

  // MARK: - Display logic

  func displaySomething(viewModel: List.Something.ViewModel)
  {
//    outputToView.doSomeViewUpdate(viewModel: viewModel)
    sectionController.doSomeViewUpdate(viewModel: viewModel)
    // NOTE: Display the result from the Presenter

    // nameTextField.text = viewModel.name
  }
}

class ListViewController: UIViewController
{
  var output: ListViewControllerOutput!
//  var outputToView: OutputToListView!
  //var outputToSC: OutputToListCellSectionController!
  var sectionController: ListCellSectionController!
  var router: ListRouter!

  // MARK: IG

  lazy var adapter: ListAdapter = {
    return ListAdapter(updater: ListAdapterUpdater(), viewController: self, workingRangeSize: 0)
  }()
  let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
//ListCollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())

  //let numbers = [0,1,2]
  //let ids = [1,2,3]
  // data source: what if i pass it entirely?
  //let feedItems = mProducersArray

  let data = feedArray
  
  // MARK: - Object lifecycle
  
  override func loadView() {
    super.loadView()
    ListConfigurator.sharedInstance.configure(viewController: self)
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    collectionView.backgroundColor = UIColor.yellow
    view.addSubview(collectionView)
    adapter.collectionView = collectionView
    adapter.dataSource = self
//    doSomethingOnLoad()
  }

  override func viewDidLayoutSubviews() {
    super.viewDidLayoutSubviews()
    collectionView.frame = view.bounds
  }

  // MARK: - Event handling
  
  func doSomethingOnLoad()
  {
//    // NOTE: Ask the Interactor to do some work
//    
//    let request = List.Something.Request()
//    output.doSomething(request: request)
  }
}


extension ListViewController: ListAdapterDataSource {
  // MARK: IGListAdapterDataSource

  func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
    return data
  }

  // returns a section contoller containing an index of feedItems (an object--- not objects)
  func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
    // indivodually works with each index of feedIems array
    let sectionController = ListStackedSectionController(sectionControllers:
      [
        ListCellSectionController(),
        ListCellSectionController(),
        ListCellSectionController(),
        ListCellSectionController(),
        ListCellSectionController(),
        ListCellSectionController(),
        ListCellSectionController(),
        ListCellSectionController()
      ])
    //sectionController.inset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
    return sectionController
  }

  func emptyView(for listAdapter: ListAdapter) -> UIView? { return nil }
}
