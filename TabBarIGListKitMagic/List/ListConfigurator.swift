//
//  ListConfigurator.swift
//  TabBarIGListKitMagic
//
//  Created by Michael Fekadu on 6/21/17.
//  Copyright (c) 2017 mikes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Connect View, Interactor, and Presenter

extension ListViewController: ListPresenterOutput
{
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    router.passDataToNextScene(segue: segue)
  }
}

extension ListInteractor: ListViewControllerOutput
{
}

extension ListPresenter: ListInteractorOutput
{
}

// MARK: - Connect View to View Controller

extension ListCellSectionController: ListCellOutput
{
}

extension ListViewController: ListCellSectionControllerOutput
{
}

extension ListCellSectionController: OutputToListCellSectionController
{
}

extension ListCell: OutputToListView
{
}

class ListConfigurator
{
  // MARK: - Object lifecycle
  
  static let sharedInstance = ListConfigurator()
  
  private init() {}
  
  // MARK: - Configuration
  
  func configure(viewController: ListViewController)
  {
    let router = ListRouter()
    router.viewController = viewController
    
    let presenter = ListPresenter()
    presenter.output = viewController
    
    let interactor = ListInteractor()
    interactor.output = presenter

    let sectionController = ListCellSectionController()
    sectionController.controller = viewController
    
    viewController.output = interactor
    viewController.sectionController = sectionController
    viewController.router = router
  }
}
